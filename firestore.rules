/**
 * @fileoverview Firestore Security Rules for CivicAI.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a public-read,
 * owner-write model for reports. This means users can only manage their own profile data,
 * while reports are publicly visible but can only be created, updated, or deleted by their authors.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 * - /reports/{reportId}: Stores civic issue reports, publicly readable but writable only by the report creator.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Reports are publicly readable to encourage transparency and community involvement.
 * - The `authorityId` and `resolvedImage` fields in the Report entity are not secured in this version of rules.
 *
 * Denormalization for Authorization:
 * - The `Report` entity MUST contain a `userId` field to indicate the author,
 *   enabling the `isOwner(resource.data.userId)` check for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile.
     * @deny (create) - User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile of user 'user123'.
     * @principle Enforces document ownership: only the user with the matching UID can create, read, update, or delete their profile.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner() {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner() {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a user to create their own profile if the userId matches their auth UID.
      allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.uid == request.auth.uid;

      // Allow a user to get their own profile.
      allow get: if isOwner();

      // Disallow listing all users.
      allow list: if false;

      // Allow a user to update their own profile.
      allow update: if isExistingOwner();

      // Allow a user to delete their own profile.
      allow delete: if isExistingOwner();
    }

    /**
     * @description Controls access to civic issue reports.
     * @path /reports/{reportId}
     * @allow (get, list) - Any user (signed in or not) can read any report.
     * @allow (create) - User with UID 'user123' can create a report with their UID in the 'userId' field.
     * @allow (update, delete) - User with UID 'user123' can update/delete a report if they are the owner (userId matches).
     * @deny (create) - User with UID 'user456' cannot create a report with 'userId' set to 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete a report owned by 'user123'.
     * @principle Allows public read access to reports but restricts write access to the report owner.
     */
    match /reports/{reportId} {
      // Helper function to check if the authenticated user is the owner of the report.
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner() {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }

      // Allow anyone to read reports.
      allow get, list: if true;

      // Allow a user to create a report if the userId matches their auth UID.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // Allow the owner of the report to update it.
      allow update: if isOwner();

      // Allow the owner of the report to delete it.
      allow delete: if isOwner();
    }
  }
}