/**
 * @fileoverview Firestore Security Rules for CivicAI.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles.
 * Reports are publicly readable but only modifiable by their authors.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /reports/{reportId}: Stores all civic issue reports.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Public read access is granted to the /reports collection to facilitate
 *   broad visibility of civic issues.
 * - All write operations are strictly controlled to maintain data integrity
 *   and prevent unauthorized modifications.
 *
 * Denormalization for Authorization:
 * - Reports contain the `userId` of the author, enabling direct ownership
 *   checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) User with matching UID can read their profile.
     * @allow (create) User with matching UID can create their profile.
     * @allow (update) User with matching UID can update their profile.
     * @allow (delete) User with matching UID can delete their profile.
     * @deny (get) User cannot read another user's profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (update) User cannot update another user's profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to civic issue reports.
     * @path /reports/{reportId}
     * @allow (get) Any user can read a report.
     * @allow (list) Any user can list reports.
     * @allow (create) A signed-in user can create a report with their UID as the author.
     * @allow (update) Only the report author can update a report.
     * @allow (delete) Only the report author can delete a report.
     * @deny (create) A user cannot create a report with a mismatched author UID.
     * @deny (update) A user cannot update a report they don't own.
     * @deny (delete) A user cannot delete a report they don't own.
     * @principle Allows public reads but restricts writes to the owner.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return resource.data.userId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }
  }
}