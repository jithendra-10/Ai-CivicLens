/**
 * @fileOverview Firestore Security Rules for CivicAI.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, balancing open access for public content with strict ownership and role-based controls for private data and administrative functions.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /reports/{reportId}: Stores all civic issue reports. Public read access, with owner-only write access, is enabled via userId.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles.
 * - Reports are publicly readable, but only the creating user or an authority user can modify or delete them.
 * - No user listing is allowed to protect user privacy.
 *
 * Denormalization for Authorization:
 * - The `reports` collection relies on denormalization. Each report document contains a `userId` field to indicate the report's owner and an `authorityId` to identify which authority resolved it.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the UID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the UID matches and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines access rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile document.
     * @deny (create, get, update, delete) - User with UID 'user456' cannot access the profile document for user 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // No user listing allowed.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid; //Immutable userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for civic issue reports.
     * @path /reports/{reportId}
     * @allow (get, list) - Any user can read any report.
     * @allow (create) - User with UID 'user123' can create a report with their own userId.
     * @allow (update, delete) - Only the owner of the report (userId) or an authority user (authorityId) can update or delete it.
     * @deny (create) - User with UID 'user456' cannot create a report on behalf of user 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete a report they do not own.
     * @principle Allows public read access to reports while restricting write access to the owner and authority user.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.userId);
    }
  }
}