/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and allows public read access to reports, with owner-only write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Access is restricted to the owner (the user with the matching UID).
 * - /reports/{reportId}: Stores civic issue reports. Publicly readable, but only the report creator can modify or delete them.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing of users is disallowed to prevent enumeration.
 * - Reports are publicly readable, but write access is restricted to the report's owner (creator).
 * - The rules do NOT enforce a rigid data validation schema in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - Reports MUST contain a `userId` field to identify the owner for write operations. This avoids needing to query a separate collection to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with the matching UID.
     * @deny (get, create, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requested user ID matches the authenticated user ID
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Check if the requested user ID matches the authenticated user ID, and that the resource exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to read their own profile
      allow get: if isOwner(userId);

      // Prevent listing of all users
      allow list: if false;

      // Allow the user to create their own profile, but only if the userId matches their auth.uid
      allow create: if isOwner(userId) && request.resource.data.uid == userId;

      // Allow the user to update their own profile
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;

      // Allow the user to delete their own profile
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to reports, but restricts write access to the report's owner.
     * @path /reports/{reportId}
     * @allow (get, list) Public read access.
     * @allow (create) if the request is made by an authenticated user and request.resource.data.userId == request.auth.uid
     * @allow (update, delete) if the request is made by the user who created the report (userId matches request.auth.uid) and document exists
     * @deny (create, update, delete) if the request is made by a user who is not the owner of the report.
     * @principle Allows public read access with owner-only writes.
     */
    match /reports/{reportId} {
      // Check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requested user ID matches the authenticated user ID
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       // Check if the request comes from a user who owns the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow anyone to read reports
      allow get: if true;
      allow list: if true;

      // Allow creation if the user is signed in and the userId field matches the authenticated user's id
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // Allow update if the user is the owner of the report, and the document exists.
      allow update: if isExistingOwner(resource.data.userId);

      // Allow delete if the user is the owner of the report, and the document exists.
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}