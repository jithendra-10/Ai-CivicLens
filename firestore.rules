/**
 * @fileoverview Firestore Security Rules for CivicLens application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, granting citizens access to their own data and authorities broader read access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /reports/{reportId}: Stores civic issue reports.
 * - /reports/{reportId}/duplicates/{duplicateId}: Stores duplicate submission records for reports.
 *
 * Key Security Decisions:
 * - Authorities can read any user profile to verify reports.
 * - Citizens can only modify their own profiles.
 * - Reports are publicly readable but can only be created by authenticated users.
 * - Duplicate submissions are managed under each report, with creation restricted to signed-in users.
 *
 * Denormalization for Authorization:
 * - The 'role' field is stored directly within the /users/{userId} document to allow for efficient role-based access control without needing additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get) Citizens can read their own profiles. Authorities can read any profile. (e.g., auth.uid == userId or user.role == 'authority')
     * @allow (create) Citizens and authorities can create their own profiles. (e.g., auth.uid == userId)
     * @allow (update, delete) Citizens can update/delete their own profiles. (e.g., auth.uid == userId)
     * @deny (get) Anonymous users cannot read user profiles.
     * @deny (create) Users cannot create profiles for other users.
     * @deny (update, delete) Users cannot update/delete other users' profiles.
     * @principle Enforces role-based access control for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAuthority() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "authority";
      }

      allow get: if isSignedIn() && (isOwner(userId) || isAuthority());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to civic issue reports.
     * @path /reports/{reportId}
     * @allow (get, list) Anyone can read or list reports.
     * @allow (create) Authenticated users can create reports.
     * @allow (update, delete) Only the report creator can update or delete a report.
     * @deny (create) Anonymous users cannot create reports.
     * @deny (update, delete) Users cannot update/delete reports they don't own.
     * @principle Allows public read access with owner-only writes.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(report) {
        return request.auth.uid == report.userId;
      }
      
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner(resource.data) && resource != null;
    }

    /**
     * @description Controls access to duplicate submission records for reports.
     * @path /reports/{reportId}/duplicates/{duplicateId}
     * @allow (create) Authenticated users can create duplicate submission records.
     * @allow (list) Anyone can list duplicate submissions under a report.
     * @deny (get, update, delete) No direct access to get, update, or delete individual duplicate submissions.
     * @principle Restricts creation to authenticated users, allowing public listing under a report.
     */
    match /reports/{reportId}/duplicates/{duplicateId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }
  }
}