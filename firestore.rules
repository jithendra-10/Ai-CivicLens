rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }

    match /users/{userId} {
      function isOwner() {
        return request.auth.uid == userId;
      }

      function isAuthority() {
        // Allow if the requesting user's own document has the role 'authority'.
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'authority';
      }

      // A user can get their own profile, or an authority can get any profile.
      allow get: if isSignedIn() && (isOwner() || isAuthority());

      // A user can only list their own document, which is not a common use case but is safe.
      allow list: if isSignedIn() && isOwner();

      // A user can create their own profile document.
      allow create: if isSignedIn() && isOwner();

      // A user can only update or delete their own profile.
      allow update, delete: if isSignedIn() && isOwner();
    }

    match /reports/{reportId} {
        function isAuthority() {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'authority';
        }

        function isOwner(report) {
            return request.auth.uid == report.userId;
        }

        // Anyone can read reports.
        allow get: if true;
        // Authorities can list all reports, citizens can only list their own.
        allow list: if isAuthority() || (isSignedIn() && request.query.where.field == 'userId' && request.query.where.value == request.auth.uid);

        // Signed-in users can create reports.
        allow create: if isSignedIn();
        
        // Authorities can update any report. Citizens can only delete their own.
        allow update: if isAuthority();
        allow delete: if isSignedIn() && isOwner(resource.data);

        match /duplicates/{duplicateId} {
            // Allow creating a duplicate record if signed in.
            allow create: if isSignedIn();
            // Only authorities should be able to read/list who submitted duplicates.
            allow read, list: if isAuthority();
        }
    }
  }
}
