rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description This ruleset enforces a user-ownership model for user profiles and allows public read access to reports, with owner-only write access.
     * @dataStructure
     *  - /users/{userId}: Stores user profile information.  Only the user can read/write their own profile.
     *  - /reports/{reportId}: Stores all civic issue reports. Anyone can read, but only the report creator can modify or delete.
     * @keySecurityDecisions
     *  - Users can only access their own data under /users/{userId}.
     *  - Listing users is disallowed to protect user privacy.
     *  - Reports are publicly readable, but only the owner can modify them.
     * @denormalizationForAuthorization
     *  - The `Report` entity requires a `userId` field to enable owner-only writes.
     */

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read their profile if request.auth.uid == 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update their profile if request.auth.uid == 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete their profile if request.auth.uid == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Disallowing listing of all users for privacy.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to civic issue reports.
     * @path /reports/{reportId}
     * @allow (get) Any user can read a report.
     * @allow (list) Any user can list reports.
     * @allow (create) User with UID 'user_abc' can create a report if request.resource.data.userId == 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a report if they are the owner (resource.data.userId == 'user_abc').
     * @allow (delete) User with UID 'user_abc' can delete a report if they are the owner (resource.data.userId == 'user_abc') and the report exists.
     * @deny (create) User with UID 'user_xyz' cannot create a report with userId 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update a report owned by 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete a report owned by 'user_abc'.
     * @principle Allows public read access but restricts modifications to the report owner.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(reportUserId) {
        return request.auth.uid == reportUserId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/reports/$(reportId)).data.userId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/reports/$(reportId)).data.userId == request.auth.uid;
    }
  }
}