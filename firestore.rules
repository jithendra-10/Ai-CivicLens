/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system for the CivicAI application.
 * Citizens can create, read, update, and delete their own reports. Authorities can read and update any report.
 * User profiles are private and only accessible to the owning user.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profile information.
 * - /reports/{reportId}: Stores civic issue reports.
 *
 * @keySecurityDecisions
 * - Users can only manage their own profiles. User listing is disallowed.
 * - Reports have public read access, but only owners or authorities can modify them.
 * - Authorities have broader privileges, including the ability to update any report.
 * - List operations on /reports are restricted: citizens can only list their own reports, while authorities can list all reports.
 *
 * @denormalizationForAuthorization
 * - The 'reports' collection relies on the `userId` field within each document to enforce ownership. This avoids costly `get()` calls to the `/users/{userId}` collection to determine the user's role or identity.
 *
 * @structuralSegregation
 * - User profiles and reports are stored in separate top-level collections to simplify access control and optimize queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the UID matches the {userId}.
     * @allow (read) - A user can read their own profile if the UID matches the {userId}.
     * @allow (update) - A user can update their own profile if the UID matches the {userId}.
     * @allow (delete) - A user can delete their own profile if the UID matches the {userId}.
     * @deny (create) - A user cannot create a profile with a mismatched UID.
     * @deny (read) - A user cannot read another user's profile.
     * @deny (list) - Listing all users is not allowed.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for civic issue reports.
     * @path /reports/{reportId}
     * @allow (get) - Any authenticated user can read a report.
     * @allow (list) - Authorities can list all reports. Citizens can list their own reports (when using where("userId", "==", request.auth.uid)).
     * @allow (create) - An authenticated user can create a report with their UID as the userId.
     * @allow (update) - The owner or an authority can update a report.
     * @allow (delete) - Only the owner can delete a report.
     * @deny (create) - A user cannot create a report with a mismatched UID.
     * @deny (update) - A user cannot update another user's report if they are not an authority.
     * @deny (delete) - A user cannot delete another user's report.
     * @principle Enforces document ownership for writes. Allows public read access.
     */
    match /reports/{reportId} {
      function isOwner(reportUserId) {
        return request.auth != null && request.auth.uid == reportUserId;
      }

      function isAuthority() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "authority";
      }

      allow get: if true;
      allow list: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && (isOwner(resource.data.userId) || isAuthority());
      allow delete: if request.auth != null && isOwner(resource.data.userId);
    }
  }
}