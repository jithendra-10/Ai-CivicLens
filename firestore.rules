rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description This ruleset enforces a user-ownership model for user profiles and allows public read access to reports, with owner-only write access.
     * @dataStructure
     *  - /users/{userId}: Stores user profile information, accessible only to the user themselves.
     *  - /reports/{reportId}: Stores civic issue reports, publicly readable but writable only by the report creator or an authorized authority.
     * @keySecurityDecisions
     *  - Users can only read and write their own profile data.
     *  - Reports are publicly readable to encourage transparency.
     *  - Report creation requires the 'userId' field to match the authenticated user's UID.
     *  - Report updates and deletes are restricted to the user who created the report.
     * @denormalizationForAuthorization
     *  - Reports denormalize the 'userId' field to enable efficient owner-based access control.
     * @structuralSegregation
     *  - Public reports are stored in a top-level collection, while private user data is stored under /users/{userId}, ensuring clear separation of concerns.
     */

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, and delete the profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Allows public read access to reports and restricts write access to the report creator.
     * @path /reports/{reportId}
     * @allow (get, list) - Any user (or unauthenticated user) can read any report.
     * @allow (create) - User with UID 'user123' can create a report with userId: 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update/delete their report where report.userId == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a report with userId: 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete a report where report.userId == 'user123'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /reports/{reportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}