/**
 * @fileoverview Firestore Security Rules for CivicLens.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles. Reports are publicly readable but writes are restricted to owners.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, secured with owner-only access.
 * - /reports/{reportId}: Stores civic issue reports. Publicly readable, but write access is controlled by the report's owner.
 * - /reports/{reportId}/duplicates/{duplicateId}: Stores duplicate submission records, writable only by the user submitting the duplicate.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the /reports collection for general discoverability.
 *
 * Denormalization for Authorization:
 * - Reports rely on the `userId` field within each document to enforce owner-only write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'testUID' can create their profile.
     * @allow (get) User with UID 'testUID' can read their profile.
     * @allow (update) User with UID 'testUID' can update their profile.
     * @allow (delete) User with UID 'testUID' can delete their profile.
     * @deny (create) User with UID 'otherUID' cannot create a profile with ID 'testUID'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to civic issue reports. Reports are publicly readable, but only the report owner can modify or delete them.
     * @path /reports/{reportId}
     * @allow (get) Any user can read any report.
     * @allow (list) Any user can list all reports.
     * @allow (create) User with UID 'testUID' can create a report if the report's userId is also 'testUID'.
     * @allow (update) User with UID 'testUID' can update a report if they are the owner.
     * @allow (delete) User with UID 'testUID' can delete a report if they are the owner.
     * @deny (create) User with UID 'otherUID' cannot create a report with userId 'testUID'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isReportOwner(reportId) {
         return request.auth.uid == resource.data.userId;
      }

      function isExistingReportOwner(reportId) {
        return isReportOwner(reportId) && resource.data != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isReportOwner(reportId);
      allow delete: if isSignedIn() && isReportOwner(reportId);
    }

    /**
     * @description Controls access to duplicate submission records.  Allows logged in users to create duplicate reports.
     * @path /reports/{reportId}/duplicates/{duplicateId}
     * @allow (create) User with UID 'testUID' can create a duplicate report under reportId 'testReport' if they are signed in.
     * @deny (create) Anonymous user cannot create a duplicate report.
     * @principle Restricts creation of duplicate reports to authenticated users.
     */
    match /reports/{reportId}/duplicates/{duplicateId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}