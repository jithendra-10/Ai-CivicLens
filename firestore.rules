/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a user-ownership model for user profiles and allows public read access to reports, with owner-only write access.
 * @data-structure
 *   - /users/{userId}: Stores user profile information, accessible only by the user themselves.
 *   - /reports/{reportId}: Stores civic issue reports, publicly readable but writable only by the user who created them.
 *   - /reports/{reportId}/duplicates: Stores duplicate reports. Writeable by the user that created the original report.
 * @key-security-decisions
 *   - User listing is disallowed to protect user privacy.
 *   - Public read access to reports allows for open data consumption.
 *   - Owner-only writes for reports ensure that only the original submitter can modify or delete their report.
 * @denormalization-for-authorization N/A - This ruleset does not currently use data denormalization for authorization.
 * @structural-segregation N/A - This ruleset does not implement structural segregation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user's UID matches the userId in the path.
     * @deny (get, create, update, delete) if the user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Verified Identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Access Control Pattern: Ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure civic issue reports. Reports are publicly readable, but only the owner can modify or delete them.
     * @path /reports/{reportId}
     * @allow (get, list) Publicly readable.
     * @allow (create) if the userId field in the request matches the user's UID.
     * @allow (update, delete) if the user's UID matches the userId field in the existing document.
     * @deny (create) if the userId field in the request does not match the user's UID.
     * @deny (update, delete) if the user's UID does not match the userId field in the existing document.
     * @principle Allows public read access with owner-only write access.
     */
    match /reports/{reportId} {
        // Verified Identity
        function isSignedIn() {
          return request.auth != null;
        }

        // Access Control Pattern: Public Read with Owner-Only Writes
        function isOwner(reportUserId) {
          return request.auth.uid == reportUserId;
        }

        function isExistingOwner() {
          return isSignedIn() && resource.data.userId == request.auth.uid;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isExistingOwner();
        allow delete: if isExistingOwner();

         /**
         * @description Secure duplicate reports subcollection. The original creator of the report can create a duplicate entry
         * @path /reports/{reportId}/duplicates
         */
        match /duplicates/{duplicateId} {
          function isOwnerOfParentReport(reportId) {
            return get(/databases/$(database)/documents/reports/$(reportId)).data.userId == request.auth.uid;
          }

          allow create: if isSignedIn() && request.resource.data.originalReportId == reportId && isOwnerOfParentReport(reportId);
          allow get: if isSignedIn() && isOwnerOfParentReport(reportId);
          allow update: if false;
          allow delete: if false;
          allow list: if false;
        }
    }
  }
}