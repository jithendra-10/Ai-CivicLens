/**
 * @file Firebase Security Rules for CivicLens
 * @version 2
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles,
 * grants public read access to reports, and restricts modification of reports to authorized users.
 * Duplicates are owned by the parent reports and can only be created by authenticated users.
 * @data_structure
 * - /users/{userId}: Stores user profile information.  Only the user themselves can read or write this data.
 * - /reports/{reportId}: Stores civic issue reports.  Anyone can read reports, but creation is restricted to authenticated users.
 *   Updates and deletes are disallowed.
 * - /reports/{reportId}/duplicates/{duplicateId}: Stores duplicate submission records.  Only authenticated users can create.
 *   Listing duplicates is only allowed for authenticated users. Updates and deletes are disallowed.
 * @key_security_decisions
 * - Users can only access their own profile data.
 * - Reports are publicly readable but can only be created by authenticated users.  Updates/deletes are prohibited to simplify the data model and prevent accidental data loss.
 * - Listing users is not permitted.
 * - Duplicate submissions can only be created by authenticated users.
 * @denormalization_for_authorization N/A
 * @structural_segregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User 'ILbooJoDSwRuGuxnjcp4XQDnhvl2' can access their own profile at /users/ILbooJoDSwRuGuxnjcp4XQDnhvl2.
     * @deny (get, create, update, delete) User 'attackerId' cannot access the profile at /users/ILbooJoDSwRuGuxnjcp4XQDnhvl2.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to civic issue reports.
     * @path /reports/{reportId}
     * @allow (get, list) Anyone can read reports to facilitate public awareness.
     * @allow (create) User 'ILbooJoDSwRuGuxnjcp4XQDnhvl2' can create a report with userId set to their own UID.
     * @deny (update, delete) No one can update or delete reports.
     * @principle Allows public read access, restricts creation to authenticated users with ownership validation.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to duplicate submission records for reports.
     * @path /reports/{reportId}/duplicates/{duplicateId}
     * @allow (create) Authenticated user can create duplicate record.
     * @allow (list) Authenticated user can list duplicate records.
     * @deny (update, delete) No one can update or delete duplicate records.
     * @principle Restricts creation of duplicate submission records to authenticated users.
     */
    match /reports/{reportId}/duplicates/{duplicateId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}