/**
 * @description This ruleset enforces a strict user-ownership model for user data and a self-creation pattern for user profiles.
 * @dataStructure All data is nested under /users/{userId}, with reports further nested under /users/{userId}/reports/{reportId}.
 * @keySecurityDecisions
 *  - Users can only read and write their own profile data.
 *  - Users can only create, read, update, and delete reports they own.
 *  - Listing of all users is disallowed.
 *  - An ownership field (`userId`) is denormalized onto the `Report` documents to avoid costly `get()` calls in the rules.
 * @denormalizationForAuthorization The `Report` entity contains a `userId` field that is used to determine ownership.
 * @structuralSegregation User-specific data (reports) is segregated under the `/users/{userId}` path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) A user can create their own profile if the UID matches the document ID.
     * @allow (get, update, delete) A user can read, update, or delete their own profile.
     * @deny (create) A user cannot create a profile with a UID that does not match their own.
     * @deny (get, update, delete) A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to reports submitted by a specific user.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create) A user can create a report under their own user ID, with a matching userId in the report data.
     * @allow (get, list, update, delete) A user can read, list, update, or delete their own reports.
     * @deny (create) A user cannot create a report under another user's ID or with a mismatched userId in the report data.
     * @deny (get, list, update, delete) A user cannot read, list, update, or delete another user's reports.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, and validates relational integrity between documents.
     */
    match /users/{userId}/reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}