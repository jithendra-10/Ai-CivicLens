rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (create) User with UID 'user123' can create their profile if the userId matches their UID.
     * @deny (get) User with UID 'user456' cannot read the profile of user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile of user 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the user is an existing owner of the document
      function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == resource.data.uid;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages civic issue reports.
     * @path /reports/{reportId}
     * @allow (get) Any user can read a report.
     * @allow (create) User with UID 'user123' can create a report if report.userId matches their UID.
     * @deny (update) User with UID 'user456' cannot update a report created by user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a report created by user 'user123'.
     * @principle Allows public read access, but restricts write access to the owner.
     */
    match /reports/{reportId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the user is the owner of the document
      function isOwner() {
        return request.auth.uid == resource.data.userId;
      }

      // Function to check if the user is an existing owner of the document
      function isExistingOwner() {
        return isSignedIn() && request.auth.uid == resource.data.userId;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Manages duplicate submission records for reports.
     * @path /reports/{reportId}/duplicates/{duplicateId}
     * @allow (create) Authenticated user can create a duplicate submission record.
     * @deny (get) Any user is denied to read a duplicate submission record.
     * @deny (update) Any user cannot update a duplicate submission record.
     * @deny (delete) Any user cannot delete a duplicate submission record.
     * @principle Requires authentication for creation.
     */
    match /reports/{reportId}/duplicates/{duplicateId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}