/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to reports while restricting write access to report owners.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user themselves.
 * - /reports/{reportId}: Stores civic issue reports, publicly readable but writable only by the report owner.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Reports are publicly readable to facilitate transparency.
 * - Only the report owner can create, update, or delete a report.
 * - The 'location' field of a report is not validated.
 *
 * Denormalization for Authorization:
 * - The 'Report' entity relies on the 'userId' field to determine ownership. This is essential
 *   for enforcing owner-only write access to reports.
 *
 * Structural Segregation:
 * - Uses a top-level collection for reports intended for public consumption, with owner-only writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with UID 'user456' cannot read the profile of 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Access control function to check ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Prevent listing of all users

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to civic issue reports. Reports are publicly readable, but only the owner can write (create, update, delete).
     * @path /reports/{reportId}
     * @allow (get) Any user can read a report.
     * @allow (list) Any user can list reports.
     * @allow (create) User with UID 'user123' can create a report with userId 'user123'.
     * @allow (update) User with UID 'user123' can update a report they own.
     * @allow (delete) User with UID 'user123' can delete a report they own.
     * @deny (create) User with UID 'user456' cannot create a report with userId 'user123'.
     * @deny (update) User with UID 'user456' cannot update a report owned by 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a report owned by 'user123'.
     * @principle Allows public read access but enforces owner-only write access based on the userId field.
     */
    match /reports/{reportId} {

      // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

       // Access control function to check ownership
      function isOwner(reportId) {
        return resource.data.userId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isOwner(reportId);
    }
  }
}