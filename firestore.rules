rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get) User with UID 'ILbooJoDSwRuGuxnjcp4XQDnhvl2' can access /users/ILbooJoDSwRuGuxnjcp4XQDnhvl2.
     * @allow (create) User with UID 'testUserId' can create /users/testUserId.
     * @allow (update) User with UID 'testUserId' can update /users/testUserId.
     * @allow (delete) User with UID 'testUserId' can delete /users/testUserId.
     * @deny (get) User with UID 'otherUserId' cannot access /users/testUserId.
     * @deny (create) User with UID 'otherUserId' cannot create /users/testUserId.
     * @deny (update) User with UID 'otherUserId' cannot update /users/testUserId.
     * @deny (delete) User with UID 'otherUserId' cannot delete /users/testUserId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requested user id matches the authenticated user id
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Allow the user to read their own profile.
      allow get: if isSignedIn() && isOwner(userId);

      // Allow the user to create their own profile. The userId must match the authenticated user's UID.
      allow create: if isSignedIn() && isOwner(userId);

      // Allow the user to update their own profile. The userId in the resource data must match the authenticated user's UID and cannot be changed.
      allow update: if isSignedIn() && isOwner(userId);

      // Allow the user to delete their own profile.
      allow delete: if isSignedIn() && isOwner(userId);

      // Prevent listing of all users.
      allow list: if false;
    }

    /**
     * @description Allows public read access to reports, but restricts write access to the report's owner.
     * @path /reports/{reportId}
     * @allow (get) Any user can access any report.
     * @allow (list) Any user can list all reports.
     * @allow (create) User with UID 'testUserId' can create a report if request.resource.data.userId == request.auth.uid.
     * @allow (update) User with UID 'testUserId' can update a report if they are the owner.
     * @allow (delete) User with UID 'testUserId' can delete a report if they are the owner.
     * @deny (create) User with UID 'otherUserId' cannot create a report with request.resource.data.userId != request.auth.uid.
     * @deny (update) User with UID 'otherUserId' cannot update a report they don't own.
     * @deny (delete) User with UID 'otherUserId' cannot delete a report they don't own.
     * @principle Allows public read with owner-only writes.
     */
    match /reports/{reportId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requested user id matches the authenticated user id
      function isOwner(reportId) {
        return resource.data.userId == request.auth.uid;
      }

      // Allow anyone to read any report.
      allow get, list: if true;

      // Allow a user to create a report if the userId matches their auth UID.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // Allow the owner of the report to update it.
      allow update: if isSignedIn() && isOwner(reportId);

      // Allow the owner of the report to delete it.
      allow delete: if isSignedIn() && isOwner(reportId);
    }

    /**
     * @description Restricts access to duplicate submissions to the report owner.
     * @path /reports/{reportId}/duplicates/{duplicateId}
     * @allow (get) User with UID 'testUserId' can get if they are the owner of the parent report.
     * @allow (list) User with UID 'testUserId' can list if they are the owner of the parent report.
     * @allow (create) Any authenticated user can create a duplicate submission.
     * @allow (update) User with UID 'testUserId' can update a duplicate submission if they own the original report.
     * @allow (delete) User with UID 'testUserId' can delete a duplicate submission if they own the original report.
     * @deny (get) User with UID 'otherUserId' cannot get if they are not the owner of the parent report.
     * @deny (list) User with UID 'otherUserId' cannot list if they are not the owner of the parent report.
     * @deny (update) User with UID 'otherUserId' cannot update a duplicate submission they don't own.
     * @deny (delete) User with UID 'otherUserId' cannot delete a duplicate submission they don't own.
     * @principle Enforces document ownership for writes.
     */
    match /reports/{reportId}/duplicates/{duplicateId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requested user id matches the authenticated user id
      function isOwner(reportId) {
        return get(/databases/$(database)/documents/reports/$(reportId)).data.userId == request.auth.uid;
      }

      // Allow the owner of the report to read duplicate submissions.
      allow get, list: if isSignedIn() && isOwner(reportId);

      // Allow any authenticated user to create a duplicate submission.
      allow create: if isSignedIn();

      // Allow the owner of the parent report to update the duplicate submission.
      allow update: if isSignedIn() && isOwner(reportId);

      // Allow the owner of the parent report to delete the duplicate submission.
      allow delete: if isSignedIn() && isOwner(reportId);
    }
  }
}