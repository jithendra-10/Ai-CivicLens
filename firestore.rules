/**
 * @fileoverview Firestore Security Rules for CivicLens.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a public-read, owner-write model for reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, secured with owner-only access.
 * - /reports/{reportId}: Stores civic issue reports, publicly readable but writable only by the report creator.
 * - /reports/{reportId}/duplicates/{duplicateId}: Stores duplicate report submissions, writable only by the report creator.
 *
 * Key Security Decisions:
 * - Users can only access their own user documents. Listing all users is disallowed.
 * - Reports are publicly readable, but only the creator can modify or delete them.
 * - The `userId` field is denormalized into the `Report` documents for efficient authorization.
 *
 * Denormalization for Authorization:
 * - The `Report` entity includes a `userId` field, denormalizing the user's ID for efficient ownership checks.
 *
 * Structural Segregation:
 * - Public reports and private user data are stored in separate top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the owner can read or write their own data.
     * @path /users/{userId}
     * @allow (get, create, update, delete): User with UID 'userId' can access their own profile.
     * @deny (get, create, update, delete): Any other user attempting to access this profile.
     * @principle Enforces strict user-ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing of all users.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public reading of reports, but restricts creation, updates, and deletions to the report creator.
     * @path /reports/{reportId}
     * @allow (get, list): Any user can read reports.
     * @allow (create): User can create a report if the userId matches their auth.uid.
     * @allow (update, delete): Only the report creator can modify or delete.
     * @deny (create): User cannot create a report if the userId does not match their auth.uid.
     * @deny (update, delete): A non-creator cannot modify or delete the report.
     * @principle Allows public read access while enforcing owner-only write access.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isReportOwner(report) {
        return isSignedIn() && report.userId == request.auth.uid;
      }

      function isExistingReportOwner(reportId) {
        return get(/databases/$(database)/documents/reports/$(reportId)).data.userId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingReportOwner(reportId) ;
      allow delete: if isSignedIn() && isExistingReportOwner(reportId);
    }

    /**
     * @description Secures duplicate submissions, ensuring that only authenticated users can create them and that the submission links to an existing report.
     * @path /reports/{reportId}/duplicates/{duplicateId}
     * @allow (create): Only authenticated users can create duplicate submissions.
     * @allow (get, list): Only authenticated users can read submissions.
     * @deny (update, delete): No one can update or delete duplicate submissions.
     * @principle Restricts duplicate submissions to authenticated users.
     */
    match /reports/{reportId}/duplicates/{duplicateId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}