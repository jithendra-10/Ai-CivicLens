/**
 * @fileoverview Firestore Security Rules for CivicLens.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a public-read, owner-write model for reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 * - /reports/{reportId}: Stores civic issue reports, publicly readable but writable only by the report creator.
 * - /reports/{reportId}/duplicates/{duplicateId}: Stores duplicate submissions, only accessible to the report creator.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Reports are publicly readable to encourage community engagement, but only the creator can modify or delete them.
 * - Listing of users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Reports must contain a `userId` field to identify the creator for write authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user's UID matches the userId.
     * @deny (create, update, delete) if the user's UID does not match the userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the request is made by the owner of the user document.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallowing listing of all users for privacy.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages civic issue reports. Reports are publicly readable, but only the creator can modify them.
     * @path /reports/{reportId}
     * @allow (get, list) anyone can read the reports.
     * @allow (create) if the report's userId matches the authenticated user's UID.
     * @allow (update, delete) if the report's userId matches the authenticated user's UID and the document exists.
     * @deny (create, update, delete) if the report's userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /reports/{reportId} {

      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the request is made by the owner of the report.
      function isOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Manages duplicate submissions for a report. Only the report creator can access these.
     * @path /reports/{reportId}/duplicates/{duplicateId}
     * @allow (get, list) if the user is the owner of the parent report.
     * @allow (create) if the user is the owner of the parent report.
     * @allow (update, delete) if the user is the owner of the parent report and the document exists.
     * @deny (create, update, delete, get, list) if the user is not the owner of the parent report.
     * @principle Restricts access to duplicate submissions to the owner of the parent report.
     */
    match /reports/{reportId}/duplicates/{duplicateId} {

      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the user is made by the owner of the report.
      function isOwner() {
        return isSignedIn() && get(/databases/$(database)/documents/reports/$(reportId)).data.userId == request.auth.uid;
      }

      allow get: if isOwner();
      allow list: if isOwner();
      allow create: if isOwner();
      allow update: if isOwner();
      allow delete: if isOwner();
    }
  }
}