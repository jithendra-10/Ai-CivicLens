/**
 * @file Firebase Security Rules for CivicAI Firestore database.
 *
 * @description This ruleset enforces a user-ownership model for user profiles
 * and a public-read, owner-write model for reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /reports/{reportId}: Stores civic issue reports, publicly readable but writable only by the user who created them.
 * - /reports/{reportId}/duplicates: Stores duplicate reports.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Reports are publicly readable, enabling broad access to civic issue data.
 * - Report creation requires the userId field to match the authenticated user's UID.
 * - Report updates and deletes are restricted to the user who created the report, and only if the report exists.
 * - Listing of user documents is disallowed.
 *
 * Denormalization for Authorization:
 * - Reports contain a `userId` field, enabling rules to quickly verify ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user's UID matches the userId.
     * @deny (get, update, delete) if the user's UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to reports but restricts write access to the report owner.
     * @path /reports/{reportId}
     * @allow (get, list) to all users.
     * @allow (create) if the userId field in the request matches the authenticated user's UID.
     * @allow (update, delete) if the user is not the owner of the report.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /reports/{reportId} {
      function isOwner(reportId) {
        return request.auth != null && get(/databases/$(database)/documents/reports/$(reportId)).data.userId == request.auth.uid;
      }

      function isCreatingOwner() {
        return request.auth != null && request.resource.data.userId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isCreatingOwner();
      allow update: if isOwner(reportId);
      allow delete: if isOwner(reportId);
    }

    /**
     * @description Allows a user to create duplicate reports within a report.
     * @path /reports/{reportId}/duplicates
     */
    match /reports/{reportId}/duplicates/{duplicateId} {
       function isOwner(reportId) {
        return request.auth != null && get(/databases/$(database)/documents/reports/$(reportId)).data.userId == request.auth.uid;
      }

      function isCreatingOwner(reportId) {
        return request.auth != null && request.resource.data.userId == request.auth.uid && get(/databases/$(database)/documents/reports/$(reportId)).data != null;
      }

      allow get: if isOwner(reportId);
      allow list: if false;
      allow create: if isCreatingOwner(reportId);
      allow update: if isOwner(reportId);
      allow delete: if isOwner(reportId);
    }
  }
}