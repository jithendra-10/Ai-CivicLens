/**
 * @fileoverview Firestore Security Rules for CivicAI.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, balancing open access for public content (reports) with strict ownership for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, secured with owner-only access.
 * - /reports/{reportId}: Stores civic issue reports. Read access is public, while write access is restricted to the report's owner or an authority.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Reports are publicly readable to encourage transparency.
 * - Authority users can view any report, and can update specific fields to resolve.
 * - No schema validation is enforced in this prototyping phase, except where critical for authorization.
 *
 * Denormalization for Authorization:
 * The `Report` entity has a `userId` field to link it to the submitting user, enabling owner-based write rules.
 * Authorities are identified by their 'authority' role in their user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces strict user-ownership for user profiles, with possible authority/admin access
     * @path /users/{userId}
     * @allow (get) User with UID 'userId' can read their own profile. Authority users can read any user profile
     * @allow (create) User with UID 'userId' can create their own profile.
     * @allow (update) User with UID 'userId' can update their own profile.
     * @allow (delete) User with UID 'userId' can delete their own profile.
     * @deny (get) User with UID 'anotherUserId' cannot read user profile with UID 'userId'.
     * @deny (create) User with UID 'anotherUserId' cannot create user profile with UID 'userId'.
     * @principle Enforces document ownership for all operations on user profiles, and allow authority access for viewing.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAuthorityOrAdmin() {
        return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'authority' ||
                get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      }

      allow get: if isOwner(userId) || isAuthorityOrAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to reports, but restricts writes to the report owner or an authority.
     * @path /reports/{reportId}
     * @allow (get, list) Any user can read any report.
     * @allow (create) User with UID 'user123' can create a report with report.userId = 'user123'.
     * @allow (update) User with UID 'user123' can update their own report. Authority can update report.
     * @allow (delete) User with UID 'user123' can delete their own report.
     * @deny (create) User with UID 'user456' cannot create a report with report.userId = 'user123'.
     * @principle Allows public read access while enforcing owner-only write access for reports, and authority access for updates.
     */
    match /reports/{reportId} {

        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isReportOwner(reportUserId) {
            return request.auth.uid == reportUserId;
        }

        function isAuthorityOrAdmin() {
          return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                 (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'authority' ||
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        }

        function isExistingReportOwner() {
            return resource.data.userId == request.auth.uid;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && resource.data.userId == request.auth.uid || isAuthorityOrAdmin();
        allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
  }
}