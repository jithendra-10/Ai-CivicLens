/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles
 * and allows public read access to reports with owner-only write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /reports/{reportId}: Stores civic issue reports.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Reports are publicly readable but can only be created, updated, or deleted by the user who created them.
 * - User listing is disallowed.
 *
 * Denormalization for Authorization:
 * - The `Report` entity contains a `userId` field to identify the report's owner,
 *   enabling owner-only write rules without additional `get()` calls.
 *
 * Structural Segregation:
 * - Public reports and private user data are stored in separate top-level collections
 *   (/reports and /users respectively) to simplify access control and improve performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth.uid and the document exists.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth.uid and the document exists.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Authenticated user cannot create a profile with a userId that doesn't match their auth.uid.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to civic issue reports.
     * @path /reports/{reportId}
     * @allow (get) Any user can read a report.
     * @allow (list) Any user can list reports.
     * @allow (create) Authenticated user can create a report if the userId matches their auth.uid.
     * @allow (update) Authenticated user can update a report if they are the owner and the document exists.
     * @allow (delete) Authenticated user can delete a report if they are the owner and the document exists.
     * @deny (create) Authenticated user cannot create a report with a userId that doesn't match their auth.uid.
     * @deny (update) Authenticated user cannot update a report if they are not the owner or the document doesn't exist.
     * @deny (delete) Authenticated user cannot delete a report if they are not the owner or the document doesn't exist.
     * @principle Allows public read access with owner-only write access.
     */
    match /reports/{reportId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}