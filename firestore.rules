/**
 * @fileOverview Firestore Security Rules for CivicAI.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection while allowing for public access to reports.
 * It enforces a strict owner-only access model for user profiles and allows any signed-in user to read the reports collection.
 * Writes to the reports collection are restricted to signed-in users only.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Only the user themselves can read or write their profile.
 * - /reports/{reportId}: Stores civic issue reports. Readable by any authenticated user.  Writable by signed-in users.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized access to user data.
 * - Reports are publicly readable to facilitate transparency and community involvement.
 * - Unauthenticated users cannot create reports, preventing spam or abuse.
 * - Denormalization is used for authorization; the `Report` entity contains a `userId` field
 *   to quickly verify ownership during updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (get, update, delete) User '1E2hiI3QcxQ56ug4NZmqQOLBps73' can access their own profile.
     * @allow (create) User '1E2hiI3QcxQ56ug4NZmqQOLBps73' can create their own profile
     * @deny (get, update, delete) User 'OTHER_USER_ID' cannot access user '1E2hiI3QcxQ56ug4NZmqQOLBps73' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to read their own profile.
      allow get: if isOwner(userId);

      // Allow the user to create their own profile.
      allow create: if isOwner(userId);

      // Allow the user to update their own profile.
      allow update: if isOwner(userId);

      // Allow the user to delete their own profile.
      allow delete: if isOwner(userId);

      // Listing users is not allowed.
      allow list: if false;
    }

    /**
     * @description Manages access to civic issue reports, allowing public reads and authenticated writes.
     * @path /reports/{reportId}
     * @allow (get, list) Any signed-in user can read all reports.
     * @allow (create) A signed-in user can create a report.
     * @deny (create, update, delete) An unauthenticated user cannot modify any reports.
     * @deny (update, delete) Only the report's author can update or delete it.
     * @principle Allows public read access but restricts writes to authenticated owners.
     */
    match /reports/{reportId} {
      // Helper function to check if the request is made by the owner
      function isOwner() {
        return request.auth != null && resource.data.userId == request.auth.uid;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      // Allow anyone to read all reports.
      allow get, list: if true;

      // Allow only authenticated users to create reports, and enforce ownership.
      allow create: if isSignedIn();

      // Allow only the owner of the report to update the report.
      allow update: if isSignedIn() && isOwner();

      // Allow only the owner of the report to delete the report.
      allow delete: if isSignedIn() && isOwner();
    }
  }
}