/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system for the CivicAI application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the owning user.
 * - /reports/{reportId}: Stores civic issue reports. Publicly readable, but writes are restricted to authorized users and validated for ownership.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Reports are publicly readable to facilitate data sharing and transparency.
 * - Report creation requires that the `userId` field matches the authenticated user's UID.
 * - Report updates and deletes are restricted to the user who created the report.
 *
 * Denormalization for Authorization:
 * - The `Report` entity includes a `userId` field to enable ownership-based security rules without requiring additional `get()` operations.
 *
 * Structural Segregation:
 * - Private user data (profile information) is stored under the `/users/{userId}` collection, while public report data is stored under the top-level `/reports/{reportId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, update, delete) if the user is the owner of the profile.
     * @allow (create) if the user's UID matches the userId in the path.
     * @deny (create, update, delete) if the user is not authenticated.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Users collection is not listable.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to civic issue reports.
     * @path /reports/{reportId}
     * @allow (get, list) to anyone.
     * @allow (create) if the user is authenticated and the userId matches the authenticated user's UID.
     * @allow (update, delete) if the user is the owner of the report.
     * @deny (create, update, delete) if the user is not authenticated or does not own the report.
     * @principle Allows public read access but restricts write access to the report owner.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return resource.data.userId == request.auth.uid;
      }

      function isExistingOwner() {
        return isOwner() && resource != null;
      }
        
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }
  }
}