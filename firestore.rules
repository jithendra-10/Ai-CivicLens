/**
 * @fileOverview Firestore Security Rules for CivicAI.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read with owner-write access control patterns.
 * User profiles are private and only accessible to the user themselves. Civic issue reports are publicly readable
 * to encourage transparency and community engagement, but only the user who created a report or an authorized
 * authority can modify or delete it.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with 'userId' matching the Firebase auth UID.
 * - /reports/{reportId}: Stores all civic issue reports. Each report has a 'userId' field indicating the creator.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data under /users/{userId}.
 * - Reports are publicly readable, but only the report creator (identified by the 'userId' field) can update or delete them.
 * - Listing of users is not permitted.
 *
 * Denormalization for Authorization:
 * - The 'reports' documents will need to have the 'userId' to indicate ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the UIDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the UIDs match and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - A user can read, update, and delete their own profile.
     * @deny (create, update, delete) - A user cannot modify another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for civic issue report documents.
     * @path /reports/{reportId}
     * @allow (get, list) - Any user can read the reports.
     * @allow (create) - Any authenticated user can create a report.
     * @allow (update, delete) - Only the user who created the report can update or delete it.
     * @deny (update, delete) - Other users cannot modify another user's report.
     * @principle Allows public read access but restricts write access to the report owner.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}