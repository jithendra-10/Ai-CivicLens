/**
 * @fileoverview Firestore Security Rules for CivicAI.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection by enforcing strict ownership for user profiles
 * and implements open reads with ownership-based writes for reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the owner.
 * - /reports/{reportId}: Stores civic issue reports. Read access is public, but write access
 *   is restricted to the report's creator.
 *
 * Key Security Decisions:
 * - User profiles are private and accessible only to the authenticated user.
 * - Report listing is public to facilitate open data and transparency.
 * - All write operations (create, update, delete) require user authentication and
 *   ownership validation.
 *
 * Denormalization for Authorization:
 * - The `Report` entity requires a `userId` field to enforce ownership for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can only access their own profile.
     * @deny (list) - Listing users is not permitted.
     * @deny (create) - Cannot create if the userId does not match their auth.uid.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      // Allow the user to create their own profile, but only if the userId matches their auth.uid
      allow create: if isSignedIn() && isOwner(userId);

      // Only the owner can update their profile. Enforce immutability of the uid field.
      allow update: if isSignedIn() && isOwner(userId);

      // Only the owner can delete their profile
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to civic issue reports.
     * @path /reports/{reportId}
     * @allow (get, list) - Reports are publicly readable.
     * @allow (create) - Authenticated user can create a report, with userId matching their auth.uid.
     * @allow (update, delete) - Only the report's creator can modify or delete it.
     * @deny (create) - Cannot create report with userId that does not match their auth.uid.
     * @principle Enables open data for reports with ownership-based writes.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return resource.data.userId == request.auth.uid;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      allow update: if isSignedIn() && isOwner();

      allow delete: if isSignedIn() && isOwner();
    }
  }
}