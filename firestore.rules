/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and a public-read, owner-write model for reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Only the user can read/write their own profile.
 * - /reports/{reportId}: Stores all reports. Read access is public, but write access is restricted to the report creator or an authority.
 * - /reports/{reportId}/duplicates/{duplicateId}: Stores records of duplicate report submissions. Only the user who submitted the duplicate report can create a record.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect privacy.
 * - Reports are publicly readable to encourage transparency.
 *
 * Denormalization for Authorization:
 * - The 'Report' entity requires a 'userId' field to identify the creator. This is essential for enforcing owner-only writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create, update, delete) if the user is the owner of the profile.
     * @deny (create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the user is the owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the user is the existing owner
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to civic issue reports.
     * @path /reports/{reportId}
     * @allow (get, list) anyone can read reports.
     * @allow (create) only signed-in users can create reports, with the creator's ID validated.
     * @allow (update, delete) only the report owner or an authority can modify/delete reports.
     * @deny (update, delete) if the user is not the owner and not an authority.
     * @principle Allows public read access but restricts write access to the report owner.
     */
    match /reports/{reportId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the user is the owner
      function isOwner(userId) {
        return get(/databases/$(database)/documents/reports/$(reportId)).data.userId == userId;
      }
       // Function to check if the requesting user is the owner
      function isRequestOwner() {
        return request.resource.data.userId == request.auth.uid;
      }

      // Function to check if the user is the existing owner
      function isExistingOwner() {
        return get(/databases/$(database)/documents/reports/$(reportId)).data.userId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && isRequestOwner();
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to duplicate report submissions.
     * @path /reports/{reportId}/duplicates/{duplicateId}
     * @allow (create) only the user who submitted the duplicate report can create a record.
     * @deny (create) if the user is not the one who submitted the duplicate report.
     *   and all other write operations are denied
     * @principle Enforces that only the submitting user can record a duplicate submission.
     */
    match /reports/{reportId}/duplicates/{duplicateId} {
       // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the user is the owner
      function isOwner(userId) {
        return get(/databases/$(database)/documents/reports/$(reportId)/duplicates/$(duplicateId)).data.userId == userId;
      }
      // Function to check if the requesting user is the owner
      function isRequestOwner() {
        return request.resource.data.userId == request.auth.uid;
      }

      allow get: if false;
      allow list: if false;

      allow create: if isSignedIn() && isRequestOwner();
      allow update: if false;
      allow delete: if false;
    }
  }
}